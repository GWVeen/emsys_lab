#include <gst/gst.h>
#include <glib.h>
#include <gst/app/gstappsink.h>
/* The appsink has received a buffer */


static void new_sample (GstAppSink *sink, GstElement *element) {
  /* Retrieve the buffer */
  GstSample *sample = NULL;
  sample = gst_app_sink_pull_sample(GST_APP_SINK(sink));
  if (sample) {
    /* The only thing we do in this example is print a * to indicate a received buffer */
    g_print ("*\n"); 
  }
  gst_sample_unref(sample);
  g_print("get emit signals %d",gst_app_sink_get_emit_signals(GST_APP_SINK(sink)));
}

static gboolean link_elements_with_filter (GstElement *element1, GstElement *element2){
   gboolean link_ok;
   GstCaps *caps;
   caps = gst_caps_new_simple ("video/x-raw",
	"format", G_TYPE_STRING, "YUY2",     
	"width", G_TYPE_INT, 160,
	"height", G_TYPE_INT, 120,
	"framerate", GST_TYPE_FRACTION, 30, 1,
	NULL);

   link_ok = gst_element_link_filtered (element1, element2, caps);
   gst_caps_unref (caps);

   if (!link_ok){
     g_warning ("Failed to link element1 and element2!");
   }

   return link_ok;
}

static gboolean bus_call (GstBus     *bus,
						GstMessage *msg,
						gpointer    data){
  GMainLoop *loop = (GMainLoop *) data;
  switch (GST_MESSAGE_TYPE (msg)) {

    case GST_MESSAGE_EOS:
      g_print ("End of stream\n");
      g_main_loop_quit (loop);
      break;

    case GST_MESSAGE_ERROR: {
      gchar  *debug;
      GError *error;

      gst_message_parse_error (msg, &error, &debug);
      g_free (debug);

      g_printerr ("Error: %s\n", error->message);
      g_error_free (error);

      g_main_loop_quit (loop);
      break;
    }
    default:
      break;
  }

  return TRUE;
}


static void
on_pad_added (GstElement *element,
              GstPad     *pad,
              gpointer    data)
{
  GstPad *sinkpad;
  GstElement *decoder = (GstElement *) data;

  /* We can now link this pad with the vorbis-decoder sink pad */
  g_print ("Dynamic pad created, linking demuxer/decoder\n");

  sinkpad = gst_element_get_static_pad (decoder, "sink");

  gst_pad_link (pad, sinkpad);

  gst_object_unref (sinkpad);
}



int
main (int   argc,
      char *argv[])
{
  GMainLoop *loop;

  GstElement *pipeline, *source, *converter, *sink;
  GstBus *bus;
  guint bus_watch_id;

  /* Initialisation */
  gst_init (&argc, &argv);

  loop = g_main_loop_new (NULL, FALSE);


  /* Check input arguments */
  if (argc != 2) {
    g_printerr ("add file address in command", argv[0]);
    return -1;
  }


  /* Create gstreamer elements */
  pipeline 	= gst_pipeline_new ("video-player");
  source   	= gst_element_factory_make ("v4l2src",      	"video-source");
  converter	= gst_element_factory_make ("videoconvert",	"video-converter");
  sink     	= gst_element_factory_make ("appsink", 	"video-output");

  if (!pipeline || !source || !converter || !sink) {
    g_printerr ("One element could not be created. Exiting.\n");
    return -1;
  }

  /* Set up the pipeline */

  /* we set the device to the source element */
  g_object_set (G_OBJECT (source), "device", "/dev/video0", NULL);

  /* we add a message handler */
  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));
  bus_watch_id = gst_bus_add_watch (bus, bus_call, loop);
  gst_object_unref (bus);

  /* we add all elements into the pipeline */
  /* source | converter | sink */
  gst_bin_add_many (GST_BIN (pipeline),
                    source, converter, sink, NULL);

  /* link the elements together */
  /* file-source (caps)-> converter -> sink */
  if (link_elements_with_filter (source, converter)){
	  gst_element_link_many (converter, sink, NULL);
  }
  else{
	g_warning ("Shit!");
  }

  /* configure appsink*/
   GstCaps *caps;
   caps = gst_caps_new_simple ("video/x-raw",
	"format", G_TYPE_STRING, "YUY2",     
	"width", G_TYPE_INT, 160,
	"height", G_TYPE_INT, 120,
	"framerate", GST_TYPE_FRACTION, 30, 1,
	NULL);

 // g_object_set (sink, "emit-signals", TRUE, "caps", caps, NULL);//done!
  g_object_set (sink, "emit-signals", TRUE, "caps", caps, NULL);//done!
  g_signal_connect (sink, "new-sample", G_CALLBACK (new_sample), sink);
  gst_caps_unref (caps);
  //g_free (audio_caps_text);

  /* Set the pipeline to "playing" state*/
  //g_print ("Now playing: %s\n", argv[1]);
  gst_element_set_state (pipeline, GST_STATE_PLAYING);


  /* Iterate */
  g_print ("Running...\n");
  g_main_loop_run (loop);



  /* Out of the main loop, clean up nicely */
  g_print ("Returned, stopping playback\n");
  gst_element_set_state (pipeline, GST_STATE_NULL);

  g_print ("Deleting pipeline\n");
  gst_object_unref (GST_OBJECT (pipeline));
  g_source_remove (bus_watch_id);
  g_main_loop_unref (loop);

  return 0;
}
